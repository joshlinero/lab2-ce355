library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

use work.calc_const.all;  -- Import constants for data widths

entity calculator_tb is
end entity;

architecture calculator_test2 of calculator_tb is
    -- Signal declarations
    signal DIN1      : std_logic_vector(DIN1_WIDTH - 1 downto 0);
    signal DIN2      : std_logic_vector(DIN2_WIDTH - 1 downto 0);
    signal operation : std_logic_vector(OP_WIDTH - 1 downto 0);
    signal DOUT      : std_logic_vector(DOUT_WIDTH - 1 downto 0);
    signal sign      : std_logic;

    -- File handling variables
    file infile : text open read_mode is "cal8.in";
    file outfile : text open write_mode is "cal8.out";
    variable my_line : line;
    variable input_din1 : integer;
    variable input_din2 : integer;
    variable input_operation : integer;
    variable output_result : integer;
    variable output_sign : character;

begin
    -- Instantiate the calculator unit under test (UUT)
    uut: entity work.calculator
        port map (
            DIN1 => DIN1,
            DIN2 => DIN2,
            operation => operation,
            DOUT => DOUT,
            sign => sign
        );

    -- Test process
    process
    begin
        -- Write the starting message to the output file
        write(my_line, string'("Starting the calculator test..."));
        writeline(outfile, my_line);

        -- Loop through the input file
        while not endfile(infile) loop
            readline(infile, my_line);

            -- Read values for DIN1, DIN2, and operation from the input file
            read(my_line, input_din1);
            read(my_line, input_din2);
            read(my_line, input_operation);

            -- Apply values to the calculator inputs
            DIN1 <= std_logic_vector(to_signed(input_din1, DIN1_WIDTH));
            DIN2 <= std_logic_vector(to_signed(input_din2, DIN2_WIDTH));
            operation <= std_logic_vector(to_unsigned(input_operation, OP_WIDTH));

            -- Wait for the operation to complete (simulate clock delay)
            wait for 10 ns;

            -- Convert output to integer for writing to the output file
            output_result := to_integer(signed(DOUT));
            output_sign := character'('+' if sign = '1' else '-');

            -- Write the results to the output file
            write(my_line, string'("DIN1=" & integer'image(input_din1) &
                                 ", DIN2=" & integer'image(input_din2) &
                                 ", Operation=" & integer'image(input_operation) &
                                 " => Result=" & integer'image(output_result) &
                                 ", Sign=" & string'(output_sign)));
            writeline(outfile, my_line);
        end loop;

        -- Write the ending message to the output file
        write(my_line, string'("Calculator test complete."));
        writeline(outfile, my_line);

        -- Stop the simulation
        wait;
    end process;
end architecture calculator_test2;
